when we analyze the decompiled code, we see that the password we need is read and stored on the stack
we also see a format string vulnerability (a vulnerable printf), and we know we can use it to read the stack, so we will display it with :

python -c 'print "%p " * 100' | ./level02

after analyzing the output we isolate some interesting data between two (nil) that don't look like addresses/input :

0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d

we know data is in little endian in memory so after removing 0x, spaces and put the data in the correct order we get :

4868373452506e7551397361354a414558674e5743717a377358476e68354a354d394b6650673348

we just have to convert this hexadecimal data to plain text to get the password.
